<?php

namespace Amb\CreditBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EncaissementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EncaissementRepository extends EntityRepository
{
	public function getAllEncaissment()
	{

		$date_debut = new \Datetime('01-01-'.date('Y'));
		$date_fin = new \Datetime('31-12-'.date('Y'));

        $qb = $this->getEntityManager()->createQuery('SELECT e 
                                        FROM AmbCreditBundle:Encaissement e WHERE e.date_Operation BETWEEN :date_debut AND :date_fin ORDER BY e.date_Operation')
                     ->setParameters(array('date_debut' => $date_debut, 'date_fin' => $date_fin));
        

	  return $qb->getResult();
	}
	public function getSumStatutEncaissment($statut, $adhesion = null)
	{

		$date_debut = new \Datetime('01-01-'.date('Y'));
		$date_fin = new \Datetime('31-12-'.date('Y'));
		if($adhesion != null){
			$qb = $this->createQueryBuilder('e')
				 ->add('select', 'SUM(e.montant)')
				 ->add('from', 'AmbCreditBundle:Encaissement e')
		         ->where('e.adhesion = :adhesion AND e.statut = :statut AND e.date_Operation BETWEEN :date_debut AND :date_fin')
		         ->setParameters(array('adhesion' => $adhesion, 'date_debut' => $date_debut, 'date_fin' => $date_fin, 'statut' => $statut));
		}else{
			$qb = $this->createQueryBuilder('e')
				 ->add('select', 'SUM(e.montant)')
				 ->add('from', 'AmbCreditBundle:Encaissement e')
		         ->where('e.statut = :statut AND e.date_Operation BETWEEN :date_debut AND :date_fin')
		         ->setParameters(array('date_debut' => $date_debut, 'date_fin' => $date_fin, 'statut' => $statut));
		}
		

	  return $qb;
	}
	public function getSumStatutEncaissment2($statut, $adhesion = null)
	{
		if($adhesion != null){
			$qb = $this->createQueryBuilder('e')
				 ->add('select', 'SUM(e.montant)')
				 ->add('from', 'AmbCreditBundle:Encaissement e')
		         ->where('e.adhesion = :adhesion AND e.statut = :statut')
		         ->setParameters(array('adhesion' => $adhesion, 'statut' => $statut));
		}else{
			$qb = $this->createQueryBuilder('e')
				 ->add('select', 'SUM(e.montant)')
				 ->add('from', 'AmbCreditBundle:Encaissement e')
		         ->where('e.statut = :statut')
		         ->setParameters(array('statut' => $statut));
		}
		

	  return $qb;
	}

	public function findDetailAdhesions($adherent){
		$qb = $this->createQueryBuilder('a');
		$qb->add('select', 'a detail, 
							SUM(a.montant) totalversement, 
							((d.cout*d.surface_appt)+((d.cout/2)*(d.surface_terrace+d.surface_jardin))) cout_global,
							100*SUM(a.montant)/((d.cout*d.surface_appt)+((d.cout/2)*(d.surface_terrace+d.surface_jardin))) avancement')
		   ->add('from', 'AmbCreditBundle:Encaissement a')
	  	   ->leftJoin('a.adhesion', 'd')
	  	   ->addSelect('d');
	    // On peut rajouter ce qu'on veut avant
	    $qb->where('a.type_encaissment = :versement AND a.adherent = :adherent AND d.adherent <> :null  AND a.statut = :statut')
	         ->setParameters(array('versement' => 'VERSEMENT', 'statut' => 'valid', 'null' => '', 'adherent' => $adherent));
	    // On peut rajouter ce qu'on veut après
	    $qb->groupBy('a.adhesion');
	    
	    return $qb->getQuery()
	              ->getResult();				
	}

	public function findDetailAdhesionsAll(){
		$qb = $this->createQueryBuilder('a');
		$qb->add('select', 'a detail, 
							SUM(a.montant) totalversement, 
							((d.cout*d.surface_appt)+((d.cout/2)*(d.surface_terrace+d.surface_jardin))) cout_global,
							100*SUM(a.montant)/((d.cout*d.surface_appt)+((d.cout/2)*(d.surface_terrace+d.surface_jardin))) avancement')
		   ->add('from', 'AmbCreditBundle:Encaissement a')
	  	   ->leftJoin('a.adhesion', 'd')
	  	   ->addSelect('d');
	    // On peut rajouter ce qu'on veut avant
	    $qb->where('a.type_encaissment = :versement ')
	         ->setParameters(array('versement' => 'VERSEMENT'));
	    // On peut rajouter ce qu'on veut après
	    $qb->groupBy('a.adhesion');
	    
	    return $qb->getQuery()
	              ->getResult();				
	}

	public function findFraisGestion($adherent, $adhesion){
		$qb = $this->createQueryBuilder('a');
		$qb->add('select', 'COUNT(a)')
		   ->add('from', 'AmbCreditBundle:Encaissement a');
	    // On peut rajouter ce qu'on veut avant
	    $qb->where('a.type_encaissment = :type_encaissement AND a.adhesion = :adhesion AND a.adherent = :adherent')
	         ->setParameters(array('adherent' => $adherent, 'adhesion' => $adhesion, 'type_encaissement' => 'FRAIS DE GESTION'));
	    $qb = $this->whereCurrentYear($qb);     
	    
	    return $qb->getQuery()
	              ->getSingleScalarResult();				
	}

	public function whereCurrentYear(\Doctrine\ORM\QueryBuilder $qb)
	{
	    $qb->andWhere('a.date_Operation BETWEEN :debut AND :fin')
	       ->setParameter('debut', new \Datetime(date('Y').'-01-01'))  // Date entre le 1er janvier de cette année
	       ->setParameter('fin',   new \Datetime(date('Y').'-12-31'));
	    return $qb;
	}

	public function IncrementQuitance(){
		$qb = $this->createQueryBuilder('a');
		$qb->add('select', 'MAX(a.n_quitance)')
		   ->add('from', 'AmbCreditBundle:Encaissement a');
	    $maxquitance = $qb->getQuery()
	              		  ->getSingleScalarResult();
		if ($maxquitance == null ) $maxquitance = 1;
		else $maxquitance = $maxquitance+1;
	    return $maxquitance;				
	}

	public function total_portefeuille($adhesion, $adherent){
		$qb = $this->createQueryBuilder('a');
		$qb->add('select', 'SUM(a.montant)')
		   ->add('from', 'AmbCreditBundle:Encaissement a');
	    // On peut rajouter ce qu'on veut avant
	    $qb->where('a.adhesion = :adhesion  AND a.adherent = :adherent')
	         ->setParameters(array('adhesion' => $adhesion,
	         					   'adherent' => $adherent
	         					   ));    
	    
	    return $qb->getQuery()->getSingleScalarResult();			
	}

	public function total_impaye($adhesion, $adherent){
		$qb = $this->createQueryBuilder('a');
		$qb->add('select', 'SUM(a.montant)')
		   ->add('from', 'AmbCreditBundle:Encaissement a');
	    // On peut rajouter ce qu'on veut avant
	    $qb->where('a.adhesion = :adhesion AND a.statut = :statut  AND a.adherent = :adherent')
	         ->setParameters(array('adhesion' => $adhesion, 
	         					   'statut' => 'unpaid',
	         					   'adherent' => $adherent
	         					   ));    
	    
	    return $qb->getQuery()->getSingleScalarResult();			
	}

	public function total_invalid($adhesion, $adherent){
		$qb = $this->createQueryBuilder('a');
		$qb->add('select', 'SUM(a.montant)')
		   ->add('from', 'AmbCreditBundle:Encaissement a');
	    // On peut rajouter ce qu'on veut avant
	    $qb->where('a.adhesion = :adhesion AND a.statut = :statut  AND a.adherent = :adherent')
	         ->setParameters(array('adhesion' => $adhesion, 
	         					   'statut' => 'invalid',
	         					   'adherent' => $adherent
	         					   ));    
	    
	    return $qb->getQuery()->getSingleScalarResult();			
	}

	public function total_piece($adhesion, $adherent, $piece, $date){
		$qb = $this->createQueryBuilder('a');
		$qb->add('select', 'SUM(a.montant)')
		   ->add('from', 'AmbCreditBundle:Encaissement a');
	    // On peut rajouter ce qu'on veut avant
	    $qb->where('a.adherent = :adherent AND a.num_piece = :piece AND a.date_Operation = :dateop ')
	         ->setParameters(array('piece' => $piece,
	         					   'adherent' => $adherent,
	         					   'dateop' => $date
	         					   ));    
	    
	    return $qb->getQuery()->getSingleScalarResult();			
	}

	public function encaissement_groupby($piece){
		$qb = $this->createQueryBuilder('a');
		$qb->add('select', 'a')
		   ->add('from', 'AmbCreditBundle:Encaissement a');
	    // On peut rajouter ce qu'on veut avant
	    $qb->where('a.num_piece = :piece')
	         ->setParameters(array('piece' => $piece
	         					   ));    
	    $qb->groupBy('a.adhesion, a.adherent, a.num_piece, a.date_Operation');
	    return $qb->getQuery()->getScalarResult();			
	}

	public function update_encaiss($adherent=null, $adhesion=null, $new_adherent, $new_adhesion, $id_enc = null )
    {
        $qB = $this->createQueryBuilder('p');
        if($id_enc != null){
	        $qB->update('AmbCreditBundle:Encaissement', 'e')
	            ->set('e.adherent', ':new_adherent')
	            ->set('e.adhesion', ':new_adhesion')
	            ->set('e.matricule', ':new_matricule')
	            ->where('e.id = :id_enc')
	            ->setParameters(array('new_adherent' => $new_adherent,
	            					  'new_adhesion' => $new_adhesion,
	            					  'new_matricule' => $new_adhesion->getMatricule(),
	            					  'id_enc' => $id_enc
		         					   ));
        }else{
        	if ($new_adherent != null && $new_adhesion != null) {
		        $qB->update('AmbCreditBundle:Encaissement', 'e')
		            ->set('e.adherent', ':new_adherent')
		            ->set('e.adhesion', ':new_adhesion')
		            ->set('e.matricule', ':new_matricule')
		            ->where('e.adherent = :adherent AND e.adhesion = :adhesion AND e.matricule = :matricule AND e.statut = :statut')
		            ->setParameters(array('new_adherent' => $new_adherent,
		            					  'new_adhesion' => $new_adhesion,
		            					  'new_matricule' => $new_adhesion->getMatricule(),
		            					  'adherent' => $adherent,
		            					  'adhesion' => $adhesion,
		            					  'matricule' => $adhesion->getMatricule(),
		            					  'statut' => 'valid'
			         					   ));
        	}else{
        		return false;
        	}
        }
         
        if($qB->getQuery()->execute()) return true;
    }

	public function findListAutrEncaissement(){
		$qb = $this->createQueryBuilder('a');
		$qb->add('select', 'a')
		   ->add('from', 'AmbCreditBundle:Encaissement a');
	    $qb->where('a.source is not null');
	    $qb->orderBy('a.date_Operation', 'DESC');
	    
	    return $qb->getQuery()
	              ->getResult();				
	}

	public function getSumAutrEncaiss()
	{

		$qb = $this->createQueryBuilder('a')
			 ->add('select', 'SUM(a.montant)')
			 ->add('from', 'AmbCreditBundle:Encaissement a');
    	$qb->where('a.source is not null');
    	return $qb;
	}
}
