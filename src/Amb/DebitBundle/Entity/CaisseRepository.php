<?php

namespace Amb\DebitBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CaisseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CaisseRepository extends EntityRepository
{
	public function ListCaisseOrderByDate()
	{

		$date_debut = new \Datetime('01-01-'.date('Y'));
		$date_fin = new \Datetime('31-12-'.date('Y'));
		$qb = $this->createQueryBuilder('d')
		         ->where('d.date_operation BETWEEN :date_debut AND :date_fin')
		         ->setParameters(array('date_debut' => $date_debut, 'date_fin' => $date_fin))
		         ->orderBy('d.date_operation', 'DESC');

	  return $qb->getQuery()
	            ->getResult();
	}

	public function JournalCaisse($date_debut, $date_fin, $typedepense = null, $justif = null, $mot_cle = null){
		$connection = $this->getEntityManager()->getConnection();
	    $sql = 'SELECT *  From caisse_journal
				WHERE ( caisse_journal.date_operation BETWEEN \''.$date_debut->format('Y-m-d').'\' AND \''.$date_fin->format('Y-m-d').'\') ';
		if ($mot_cle != null) {
			$sql .= ' AND (caisse_journal.libelle LIKE \'%'.$mot_cle.'%\' OR caisse_journal.commentaire LIKE \'%'.$mot_cle.'%\') ';
		}
		if ($justif != null) {
			$sql .= ' AND ( caisse_journal.justif LIKE \'%'.$justif.'%\') ';
		}
		if ($typedepense != null) {
			$sql .= ' AND caisse_journal.typedepense_id = '.$typedepense.' ';
		}
		$sql .= ' ORDER BY caisse_journal.date_operation ASC';
	    return $connection->executeQuery($sql)->fetchAll();
	}    

	public function soldeInitial($date_debut, $date_fin, $typedepense = null, $justif = null, $mot_cle = null)
	{
		$connection = $this->getEntityManager()->getConnection();
	    $sql = 'SELECT SUM(encaisse) as encaisse,SUM(decaisse) as decaisse From caisse_journal
				WHERE  caisse_journal.date_operation < ( \''.$date_debut->format('Y-m-d').'\' ) ';
		if ($mot_cle != null) {
			$sql .= ' AND (caisse_journal.libelle LIKE \'%'.$mot_cle.'%\' OR caisse_journal.commentaire LIKE \'%'.$mot_cle.'%\') ';
		}
		if ($justif != null) {
			$sql .= ' AND ( caisse_journal.justif LIKE \'%'.$justif.'%\') ';
		}
		if ($typedepense != null) {
			$sql .= ' AND caisse_journal.typedepense_id = '.$typedepense.' ';
		}
	    return $connection->executeQuery($sql)->fetch();
	}  

	public function SumDecaissementCaisse($date_debut, $date_fin, $typedepense = null, $justif = null, $mot_cle = null)
	{
		$connection = $this->getEntityManager()->getConnection();
	    $sql = 'SELECT SUM(decaisse) as total From caisse_journal
				WHERE ( caisse_journal.date_operation BETWEEN \''.$date_debut->format('Y-m-d').'\' AND \''.$date_fin->format('Y-m-d').'\') ';
		if ($mot_cle != null) {
			$sql .= ' AND (caisse_journal.libelle LIKE \'%'.$mot_cle.'%\' OR caisse_journal.commentaire LIKE \'%'.$mot_cle.'%\') ';
		}
		if ($justif != null) {
			$sql .= ' AND ( caisse_journal.justif LIKE \'%'.$justif.'%\') ';
		}
		if ($typedepense != null) {
			$sql .= ' AND caisse_journal.typedepense_id = '.$typedepense.' ';
		}
	    return $connection->executeQuery($sql)->fetch();
	} 

	public function SumEncaissementCaisse($date_debut, $date_fin, $typedepense = null, $justif = null, $mot_cle = null)
	{
		$connection = $this->getEntityManager()->getConnection();
	    $sql = 'SELECT SUM(encaisse) as total From caisse_journal
				WHERE ( caisse_journal.date_operation BETWEEN \''.$date_debut->format('Y-m-d').'\' AND \''.$date_fin->format('Y-m-d').'\') ';
		if ($mot_cle != null) {
			$sql .= ' AND (caisse_journal.libelle LIKE \'%'.$mot_cle.'%\' OR caisse_journal.commentaire LIKE \'%'.$mot_cle.'%\') ';
		}
		if ($justif != null) {
			$sql .= ' AND ( caisse_journal.justif LIKE \'%'.$justif.'%\') ';
		}
		if ($typedepense != null) {
			$sql .= ' AND caisse_journal.typedepense_id = '.$typedepense.' ';
		}
	    return $connection->executeQuery($sql)->fetch();
	}   

	public function getSumDecaissementCaisseTotal()
	{
		$qb = $this->createQueryBuilder('d');
		$qb->add('select', 'SUM(d.montant)');

	  	return $qb->getQuery()->getSingleScalarResult();
	}	
}
