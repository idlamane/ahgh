<?php

namespace Amb\DebitBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DepenseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DepenseRepository extends EntityRepository
{
	public function getDepenseAvecTypeAll($type=null)
	{
		if($type=="gestion")$compte="GESTION";
		elseif($type=="amortissement")$compte="AMORTISSEMENT";

		$date_debut = new \Datetime('01-01-'.date('Y'));
		$date_fin = new \Datetime('31-12-'.date('Y'));
		$qb = $this->createQueryBuilder('d')
		         ->leftJoin('d.typedepense', 't')
		         ->addSelect('t.compte')
		         ->leftJoin('d.fournisseur', 'f')
                 ->addSelect('f.raison_social')
		         ->where('d.date_operation BETWEEN :date_debut AND :date_fin');
        if($type=="gestion"){
        	$qb->andwhere('d.desistement is null AND d.adherent is null AND (t.compte=:compte OR t.compte is null)')
		         ->setParameters(array('date_debut' => $date_debut, 'date_fin' => $date_fin, 'compte' => $compte));
		}elseif($type=="amortissement"){
			$qb->andwhere('d.desistement is null AND d.adherent is null AND t.compte=:compte')
		         ->setParameters(array('date_debut' => $date_debut, 'date_fin' => $date_fin, 'compte' => $compte));
		}else{
			$qb->andwhere('d.desistement is null AND d.adherent is null ')
		         ->setParameters(array('date_debut' => $date_debut, 'date_fin' => $date_fin));
		}

	  return $qb->getQuery()
	            ->getResult();
	}

	public function getDepenseAvecType($id)
	{
	  $qb = $this->createQueryBuilder('d')
	             ->leftJoin('d.typedepense', 't')
	             ->addSelect('t.compte')
                 ->where('d.id = :id')
                 ->setParameters(array('id' => $id));

	  return $qb->getQuery()
	            ->getResult();
	}



	/**
	* @return int
	*/
	public function getCount(){
		$aResultTotal = $this->getEntityManager()
		  ->createQuery('SELECT COUNT(a) FROM AmbDebitBundle:Depense a')
		  ->setMaxResults(1)
		  ->getResult();
		 return $aResultTotal[0][1];
	}

	public function TotalReglementContrat($id){
		$qb = $this->createQueryBuilder('a');
		$qb->add('select', 'SUM(a.montant)');
	    // On peut rajouter ce qu'on veut avant
	    $qb->where('a.contrat = :id')
	         ->setParameters(array('id' => $id ));    
	    
	    return $qb->getQuery()->getSingleScalarResult();			
	}

	public function getSumEncaissementCaisseTotal()
	{
		$qb = $this->createQueryBuilder('d');
		$qb->add('select', 'SUM(d.montant)');
		$qb->where('d.caisse IS NOT NULL ');

	  	return $qb->getQuery()->getSingleScalarResult();
	}

	public function getSumDepenses($type=null)
	{
		if($type=="gestion")$compte="GESTION";
		elseif($type=="amortissement")$compte="AMORTISSEMENT";

		$qb = $this->createQueryBuilder('e')
			 ->add('select', 'SUM(e.montant)')
			 ->add('from', 'AmbDebitBundle:Depense e')
	         ->leftJoin('e.typedepense', 't');
        if($type=="gestion"){
        	$qb->andwhere('e.desistement is null AND e.adherent is null AND (t.compte=:compte OR t.compte is null)')
		         ->setParameters(array('compte' => $compte));
		}elseif($type=="amortissement"){
			$qb->andwhere('e.desistement is null AND e.adherent is null AND t.compte=:compte')
		         ->setParameters(array('compte' => $compte));
		}else{
			$qb->andwhere('e.desistement is null AND e.adherent is null ');
		}
    	return $qb;
	}	
	public function getSumDepenses_nofilter($type=null)
	{
		if($type=="gestion")$compte="GESTION";
		elseif($type=="amortissement")$compte="AMORTISSEMENT";

		$date_debut = new \Datetime('01-01-'.date('Y'));
		$date_fin = new \Datetime('31-12-'.date('Y'));
		$qb = $this->createQueryBuilder('e')
			 ->add('select', 'SUM(e.montant)')
			 ->add('from', 'AmbDebitBundle:Depense e')
	         ->leftJoin('e.typedepense', 't')
	         ->where('e.date_operation BETWEEN :date_debut AND :date_fin');
        if($type=="gestion"){
        	$qb->andwhere('e.desistement is null AND e.adherent is null AND (t.compte=:compte OR t.compte is null)')
		         ->setParameters(array('date_debut' => $date_debut, 'date_fin' => $date_fin, 'compte' => $compte));
		}elseif($type=="amortissement"){
			$qb->andwhere('e.desistement is null AND e.adherent is null AND t.compte=:compte')
		         ->setParameters(array('date_debut' => $date_debut, 'date_fin' => $date_fin, 'compte' => $compte));
		}else{
			$qb->andwhere('e.desistement is null AND e.adherent is null ')
		         ->setParameters(array('date_debut' => $date_debut, 'date_fin' => $date_fin));
		}

    	return $qb;
	}

	public function ReparitionsDepense($compte, $current_year=false){
		$qb = $this->createQueryBuilder('d');
		$date_debut = new \Datetime('01-01-'.date('Y'));
		$date_fin = new \Datetime('31-12-'.date('Y'));
		$qb->add('select', 'td.libelle typedepense, d.caisse, SUM(d.montant) montant')
		   ->add('from', 'AmbDebitBundle:Depense d')
	  	   ->leftJoin('d.typedepense', 'td');
  	    if ($compte == 'GESTION') {
  	    	$qb->Where('td.compte = :compte OR d.caisse is not null');
  	    }else{
  	    	$qb->Where('td.compte = :compte');
  	    }

		if ($current_year == true) {
  	    	$qb->andwhere('d.date_operation BETWEEN :date_debut AND :date_fin')
  	    	   ->setParameters(array('compte' => $compte, 'date_debut' => $date_debut, 'date_fin' => $date_fin));
		}else{
			$qb->setParameters(array('compte' => $compte));
		}
	    $qb->groupBy('d.typedepense')
	       ->orderBy('d.libelle', 'ASC');
	    return $qb;				
	}
}
